import javax.swing.*;
import java.awt.*;
import javax.swing.border.BevelBorder;
import java.awt.event.*;
import java.util.Random;
import javax.swing.Timer;

public class SpringSimulator extends JFrame implements ActionListener
{
  private JTextField massTextField;
  private JTextField muTextField;
  private JTextField kTextField;
  private JTextField x0TextField;

  private JLabel massLabel;
  private JLabel muLabel;
  private JLabel kLabel;
  private JLabel x0Label;

  private JButton startButton;
  private JButton resetButton;
  private JPanel drawingPanel;
  private GridBagConstraints gbc;

  SpringODE spring;

  private double time;      

  //  These elements are used to control the execution
  //  speed of the game. Without them, the game would
  //  run too quickly.
  private GameUpdater gameUpdater;
  private Timer gameTimer;

  public SpringSimulator() {

    //  Create a Timer object that will be used
    //  to slow the action down and an ActionListener
    //  that the Timer will call. The timeDelay variable
    //  is the time delay in milliseconds.
    gameUpdater = new GameUpdater();
    int timeDelay = 50;
    gameTimer = new Timer(timeDelay, gameUpdater);

    //  Create JTextField objects to display the outcome.
    massTextField = new JTextField("1.0",6);
    muTextField = new JTextField("0.5",6);
    kTextField = new JTextField("20.0",6);
    x0TextField = new JTextField("0.4",6);

    //  Create a SpringODE object using values from 
    //  the textfields.
    double mass = Double.parseDouble(massTextField.getText());
    double mu = Double.parseDouble(muTextField.getText());
    double k = Double.parseDouble(kTextField.getText());
    double x0 = Double.parseDouble(x0TextField.getText());
    spring = new SpringODE(mass, mu, k, x0);

    //  Create some JLabels
    massLabel = new JLabel("End mass, kg");
    muLabel = new JLabel("Damping coefficient, kg/s");
    kLabel = new JLabel("Spring constant, N/m");
    x0Label = new JLabel("Initial location, m");

    //  Create a JButton that will start the box moving
    startButton = new JButton("Start");
    startButton.setBorder(new BevelBorder(BevelBorder.RAISED));
    startButton.setPreferredSize(new Dimension(60,35));
    startButton.addActionListener(this);

    //  Create a JButton that will update the drawing area.
    resetButton = new JButton("Reset");
    resetButton.setBorder(new BevelBorder(BevelBorder.RAISED));
    resetButton.setPreferredSize(new Dimension(60,35));
    resetButton.addActionListener( new ActionListener() {
      public void actionPerformed(ActionEvent ae) {
        //  stop the timer.
        gameTimer.stop();

        //  Reset the location of the spring based on what
        //  value is in the "Initial location" textfield.
       double x0 = Double.parseDouble(x0TextField.getText());
       spring.setQ(x0, 1);

         //  Update the display.
        updateDisplay();
      }  
    });

    //  Create a JTextArea that will display the results
    drawingPanel = new JPanel();
    drawingPanel.setPreferredSize(new Dimension(201, 151));

    //  Place components on a panel using a GridBagLayout
    JPanel northPanel = new JPanel();
    GridBagLayout gridBagLayout1 = new GridBagLayout();
    northPanel.setLayout(gridBagLayout1);

    int col;
    int row;
    int numCol = 1;
    int numRow = 1;
    Insets insets = new Insets(5, 3, 5, 3);

    row = 0;
    col = 0;
    gbc = new GridBagConstraints(col, row, numCol, numRow,
                 0.0, 0.0, GridBagConstraints.EAST,
                 GridBagConstraints.NONE, insets, 0, 0);
    gridBagLayout1.setConstraints(massLabel, gbc);

    col = 1;
    gbc = new GridBagConstraints(col, row, numCol, numRow,
                 0.0, 0.0, GridBagConstraints.WEST,
                 GridBagConstraints.NONE, insets, 0, 0);
    gridBagLayout1.setConstraints(massTextField, gbc);

    row = 1;
    col = 0;
    gbc = new GridBagConstraints(col, row, numCol, numRow,
                 0.0, 0.0, GridBagConstraints.EAST,
                 GridBagConstraints.NONE, insets, 0, 0);
    gridBagLayout1.setConstraints(kLabel, gbc);

    col = 1;
    gbc = new GridBagConstraints(col, row, numCol, numRow,
                 0.0, 0.0, GridBagConstraints.WEST,
                 GridBagConstraints.NONE, insets, 0, 0);
    gridBagLayout1.setConstraints(kTextField, gbc);

    row = 2;
    col = 0;
    gbc = new GridBagConstraints(col, row, numCol, numRow,
                 0.0, 0.0, GridBagConstraints.EAST,
                 GridBagConstraints.NONE, insets, 0, 0);
    gridBagLayout1.setConstraints(muLabel, gbc);

    col = 1;
    gbc = new GridBagConstraints(col, row, numCol, numRow,
                 0.0, 0.0, GridBagConstraints.WEST,
                 GridBagConstraints.NONE, insets, 0, 0);
    gridBagLayout1.setConstraints(muTextField, gbc);

    row = 3;
    col = 0;
    gbc = new GridBagConstraints(col, row, numCol, numRow,
                 0.0, 0.0, GridBagConstraints.EAST,
                 GridBagConstraints.NONE, insets, 0, 0);
    gridBagLayout1.setConstraints(x0Label, gbc);

    col = 1;
    gbc = new GridBagConstraints(col, row, numCol, numRow,
                 0.0, 0.0, GridBagConstraints.WEST,
                 GridBagConstraints.NONE, insets, 0, 0);
    gridBagLayout1.setConstraints(x0TextField, gbc);

    row = 0;
    col = 2;
    gbc = new GridBagConstraints(col, row, numCol, numRow,
                 0.0, 0.0, GridBagConstraints.EAST,
                 GridBagConstraints.NONE, insets, 0, 0);
    gridBagLayout1.setConstraints(startButton, gbc);

    row = 1;
    col = 2;
    gbc = new GridBagConstraints(col, row, numCol, numRow,
                 0.0, 0.0, GridBagConstraints.EAST,
                 GridBagConstraints.NONE, insets, 0, 0);
    gridBagLayout1.setConstraints(resetButton, gbc);

    northPanel.add(massLabel);
    northPanel.add(massTextField);
    northPanel.add(muLabel);
    northPanel.add(muTextField);
    northPanel.add(kLabel);
    northPanel.add(kTextField);
    northPanel.add(x0Label);
    northPanel.add(x0TextField);
    northPanel.add(startButton);
    northPanel.add(resetButton);

    //  The drawing panel.
    JPanel southPanel = new JPanel();
    GridBagLayout gridBagLayout2 = new GridBagLayout();
    southPanel.setLayout(gridBagLayout2);

    row = 0;
    col = 0;
    gbc = new GridBagConstraints(col, row, numCol, numRow,
                 0.0, 0.0, GridBagConstraints.CENTER,
                 GridBagConstraints.NONE, 
                 new Insets(10, 10, 10, 20), 0, 0);
    gridBagLayout2.setConstraints(drawingPanel, gbc);

    southPanel.add(drawingPanel);

    //  Add the JPanel objects to the content pane
    getContentPane().setLayout(new BorderLayout());
    getContentPane().add(northPanel, BorderLayout.WEST);
    getContentPane().add(southPanel, BorderLayout.SOUTH);

    //  Add a title to the JFrame, size it, and make it visible.
    setTitle("Spring Simulator");
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    setBounds(100,100,300,400);
    setVisible(true);

    //  Update the GUI display
    updateDisplay(); 
  }

  //  The actionPerformed() method is called when 
  //  the "Start" button is pressed. 
  public void actionPerformed(ActionEvent event) {
    
    //  Get the initial values from the textfield
    double mass = Double.parseDouble(massTextField.getText());
    double mu = Double.parseDouble(muTextField.getText());
    double k = Double.parseDouble(kTextField.getText());
    double x0 = Double.parseDouble(x0TextField.getText());

    //  Create a SpringODE object
    spring = new SpringODE(mass, mu, k, x0);

    //  Start the spring moving using a Timer object
    //  to slow down the action.
    gameTimer.start();
  }

  //  This method redraws the GUI display.
  private void updateDisplay() {
    Graphics g = drawingPanel.getGraphics();
    int width = drawingPanel.getWidth() - 1;
    int height = drawingPanel.getHeight() - 1;

    g.clearRect(0, 0, width, height);
    g.drawRect(0, 0, width, height); 
    g.drawLine(20, 0, 20, height);
    g.drawLine(20, 100, width, 100);

    //  draw spring in its current location
    int xPosition = (int)(100 + 100.0*spring.getX());
    g.fillRect(xPosition, 80, 20, 20);
    g.drawLine(20, 90, xPosition, 90);

  }

  public static void main(String args[]) {
    SpringSimulator gui = new SpringSimulator();
  }

  //  This ActionListener is called by the Timer
  class GameUpdater implements ActionListener {
    public void actionPerformed(ActionEvent event) {

      //  Use the ODE solver to update the location of
      //  the spring. 
      double dt = 0.05;
      spring.updatePositionAndVelocity(dt);

      //  Update the display
      updateDisplay();
    }
  }
}